<?xml version="1.0" encoding="UTF-8"?>
<xsd:schema targetNamespace="http://www.opengis.net/se/2.0/core"
  xmlns:se="http://www.opengis.net/se/2.0/core" 
  xmlns:fes="http://www.opengis.net/fes/2.1"
  xmlns:ows="http://www.opengis.net/ows/2.0"
  xmlns:xlink="http://www.w3.org/1999/xlink"
  xmlns:xsd="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified">

  <xsd:import namespace="http://www.opengis.net/ows/2.0" schemaLocation="../../ows/2.0/owsAll.xsd" />
  <xsd:import namespace="http://www.opengis.net/fes/2.1" schemaLocation="../../filter/2.1/filter.xsd" />
  <xsd:import namespace="http://www.w3.org/1999/xlink" schemaLocation="http://www.w3.org/1999/xlink.xsd"/>



  <!-- ********************************************************************* -->
  <xsd:annotation>
    <xsd:documentation>SE COMMON ELEMENTS version 2.0.0 (2011-01-10)</xsd:documentation>
  </xsd:annotation>


  <!-- ********************************************************************* -->
  <xsd:simpleType name="UomType">
    <xsd:restriction base="xsd:anyURI">
      <xsd:enumeration value="urn:ogc:def:uom:se::px" />
      <xsd:enumeration value="urn:ogc:def:uom:se::mm" />
      <xsd:enumeration value="urn:ogc:def:uom:se::in" />
      <xsd:enumeration value="urn:ogc:def:uom:se::pt" />
      <xsd:enumeration value="urn:ogc:def:uom:se::percent" />
      <xsd:enumeration value="urn:ogc:def:uom:se::gm" />
      <xsd:enumeration value="urn:ogc:def:uom:se::gft" />
    </xsd:restriction>
  </xsd:simpleType>


  <!-- ********************************************************************* -->
  <!--<xsd:attribute name="version" type="se:VersionType"/>-->
  <xsd:simpleType name="VersionType">
    <xsd:annotation>
      <xsd:documentation>The "VersionType" merely restricts the version string that may be used with XML documents based on this schema.</xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="2.0.0"/>
    </xsd:restriction>
  </xsd:simpleType>

  <!-- ********************************************************************* -->
  <xsd:element name="Name" type="xsd:string"/>
  <!-- ********************************************************************* -->
  <xsd:element name="Description" type="ows:DescriptionType"/>
  <!-- ********************************************************************* -->
  <xsd:element name="DataTypeName" type="xsd:QName"/>
  <!-- ********************************************************************* -->
  <!--<xsd:element name="CoverageName" type="xsd:string"/>-->

  <!-- ********************************************************************* -->
  <xsd:element name="OnlineResource" type="se:OnlineResourceType">
    <xsd:annotation>
      <xsd:documentation>An "OnlineResource" is used to refer to an HTTP URL.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>

  <xsd:complexType name="OnlineResourceType">
        <xsd:annotation>
          <xsd:documentation>Reference to on-line resource from which data can be obtained.</xsd:documentation>
        </xsd:annotation>
        <xsd:attributeGroup ref="xlink:simpleAttrs"/>
  </xsd:complexType>


  <!-- ********************************************************************* -->
  <xsd:complexType name="VariableOnlineResourceType">
        <xsd:sequence>
          <xsd:element ref="se:Href" />
        </xsd:sequence>
  </xsd:complexType>
  <xsd:element name="Href" type="se:ParameterValueType" /> <!-- URI -->



  <!-- ********************************************************************* -->
  <xsd:element name="InlineContent" type="se:InlineContentType">
    <xsd:annotation>
      <xsd:documentation>"InlineContent" is XML- or base64-encoded encoded content in some externally-defined format that is included in an SE in-line.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>

  <xsd:complexType name="InlineContentType" mixed="true">
     <xsd:sequence>
         <xsd:any minOccurs="0" />
     </xsd:sequence>
     <xsd:attribute name="encoding" use="required">
         <xsd:simpleType>
             <xsd:restriction base="xsd:token">
                 <xsd:enumeration value="xml"/>
	         <xsd:enumeration value="base64"/>
	     </xsd:restriction>
         </xsd:simpleType>
      </xsd:attribute>
  </xsd:complexType>



  <xsd:element name="Extension" type="se:ExtensionType" />
  <xsd:complexType name="ExtensionType" >
    <xsd:sequence>
      <xsd:element ref="se:ExtensionParameter" maxOccurs="unbounded" />
    </xsd:sequence>
  </xsd:complexType>

  <xsd:element name="ExtensionParameter" type="se:ExtensionParameterType" />
  <xsd:complexType name="ExtensionParameterType" mixed="true">
	<xsd:attribute name="name" type="xsd:string" use="required"/>
  </xsd:complexType>


  <!-- Style Abstract Type and Element -->
  <xsd:element name="AbstractStyle" type="se:AbstractStyleType" abstract="true" />
  <xsd:complexType name="AbstractStyleType" abstract="true" />

  
  <!-- ********************************************************************* -->
  <xsd:annotation>
    <xsd:documentation>Symbology Encoding FEATURE STYLE version 2.0.0 (2011-01-10)</xsd:documentation>
  </xsd:annotation>

  <!-- ********************************************************************* -->
  <xsd:element name="Style" type="se:StyleType" substitutionGroup="se:AbstractStyle" >
    <xsd:annotation>
      <xsd:documentation>A Style contains styling information specific to one feature type.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="StyleType">
    <xsd:complexContent>
      <xsd:extension base="se:AbstractStyleType">
        <xsd:sequence>
          <xsd:element ref="se:Name" minOccurs="0"/>
          <xsd:element ref="se:Description" minOccurs="0"/>
          <xsd:element ref="se:DataTypeName" minOccurs="0"/>
          <xsd:element ref="se:SemanticTypeIdentifier" minOccurs="0"
            maxOccurs="unbounded"/>
          <xsd:element ref="se:Rule" maxOccurs="unbounded"/>
        </xsd:sequence>
        <xsd:attribute name="version" type="se:VersionType" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="SemanticTypeIdentifier" type="xsd:string"/>

  <!-- ********************************************************************* -->
  <xsd:element name="StyleReference"
    type="se:StyleReferenceType" substitutionGroup="se:AbstractStyle">
    <xsd:annotation>
      <xsd:documentation>A StyleReference refers to a remote feature-ype-style document.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="StyleReferenceType">

    <xsd:complexContent>
      <xsd:extension base="se:AbstractStyleType">
        <xsd:sequence>
          <xsd:element ref="se:OnlineResource"/>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>

  <!-- ********************************************************************* 
       CANDIDATE FOR REMOVAL 
  <xsd:element name="CoverageStyle" type="se:CoverageStyleType">
    <xsd:annotation>
      <xsd:documentation>A CoverageStyle contains styling information specific to one Coverage offering.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="CoverageStyleType">
    <xsd:sequence>
      <xsd:element ref="se:Name" minOccurs="0"/>
      <xsd:element ref="se:Description" minOccurs="0"/>
      <xsd:element ref="se:CoverageName" minOccurs="0"/>
      <xsd:element ref="se:SemanticTypeIdentifier" minOccurs="0"
        maxOccurs="unbounded"/>
      <xsd:element ref="se:Rule" maxOccurs="unbounded"/>
    </xsd:sequence>
    <xsd:attribute name="version" type="se:VersionType" />
  </xsd:complexType> -->

  <!-- ********************************************************************* -
  <xsd:element name="CoverageStyleReference"
       CANDIDATE FOR REMOVAL 
    type="se:CoverageStyleReferenceType">
    <xsd:annotation>
      <xsd:documentation>A CoverageStyleReference refers to a remote coverage-style document.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="CoverageStyleReferenceType">
    <xsd:sequence>
      <xsd:element ref="se:OnlineResource"/>
    </xsd:sequence>
  </xsd:complexType>-->

  <!-- ********************************************************************* -->
  <xsd:element name="Rule" type="se:RuleType">
    <xsd:annotation>
      <xsd:documentation>A Rule is used to attach property/scale conditions to and group the individual symbols used for rendering.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="RuleType">
    <xsd:sequence>
      <xsd:element ref="se:Name" minOccurs="0"/>
      <xsd:element ref="se:Description" minOccurs="0"/>
      <xsd:choice minOccurs="0">
        <xsd:element ref="fes:Filter"/>
        <xsd:element ref="se:ElseFilter"/>
	<xsd:element name="WhereClause" type="xsd:string" />
      </xsd:choice>
      <!--<xsd:element ref="se:DomainConstraints" minOccurs="0"/>-->
      <xsd:element ref="se:MinScaleDenominator" minOccurs="0"/>
      <xsd:element ref="se:MaxScaleDenominator" minOccurs="0"/>
      <xsd:element ref="se:Symbolizer"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:element name="ElseFilter" type="se:ElseFilterType"/>
  <xsd:complexType name="ElseFilterType"/>
  <xsd:element name="MinScaleDenominator" type="xsd:double"/>
  <xsd:element name="MaxScaleDenominator" type="xsd:double"/>


  <!-- Candidate for deletion 
  <xsd:element name="DomainConstraints" type="se:DomainConstraintsType">
    <xsd:annotation>
      <xsd:documentation>
        DomainConstraints describes the time or domain selections.
      </xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="DomainConstraintsType">
    <xsd:sequence>
      <xsd:element ref="se:DomainAxis" minOccurs="0" maxOccurs="unbounded"/>
      <xsd:element ref="se:TimePeriod" minOccurs="0"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:element name="DomainAxis" type="se:DomainAxisType"/>
  <xsd:complexType name="DomainAxisType">
    <xsd:sequence>
      <xsd:element ref="se:Name"/>
      <xsd:element ref="se:DomainValue"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:element name="DomainValue" type="xsd:string"/>
  <xsd:element name="TimePeriod" type="xsd:string"/>-->


<!--             SYMBOLIZERS -->


  <!-- ********************************************************************* -->
  <xsd:complexType name="ParameterValueType" mixed="true">
    <xsd:annotation>
      <xsd:documentation>Type for numeric, text and color parameters</xsd:documentation>
    </xsd:annotation>
    <xsd:sequence minOccurs="0">
      <xsd:element ref="fes:expression" />
    </xsd:sequence>
  </xsd:complexType>


  <!-- **** Abstract Elements and Types (i.e. Extension Points) **** -->
  <!-- Symbolizer Abstract Type and Element -->
  <xsd:annotation>
    <xsd:documentation>SE Symbolizer version 2.0.0</xsd:documentation>
  </xsd:annotation>
  <xsd:element name="Symbolizer" type="se:SymbolizerType" abstract="true"/>
  <xsd:complexType name="SymbolizerType" abstract="true">
    <xsd:annotation>
      <xsd:documentation>A "SymbolizerType" is an abstract type for encoding the graphical properties used to portray geographic information.  Concrete Symbolizer types are derived from this base type.</xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element ref="se:Name" minOccurs="0"/>
      <xsd:element ref="se:Description" minOccurs="0"/>
      <xsd:element ref="se:LegendGraphic" minOccurs="0"/>
      <xsd:element ref="se:Extension" minOccurs="0" />
    </xsd:sequence>
    <xsd:attribute name="version" type="se:VersionType" />
  </xsd:complexType>
  <xsd:element name="LegendGraphic" type="se:LegendGraphicType"/>
  <xsd:complexType name="LegendGraphicType">
    <xsd:sequence>
      <xsd:element ref="se:Graphic"/>
    </xsd:sequence>
  </xsd:complexType>


  <!-- Fill Abstract Type and Element -->
  <xsd:element name="Fill" type="se:FillType" abstract="true">
    <xsd:annotation>
      <xsd:documentation>A "Fill" collects the SolidFill, GraphicFill, and FillReference elements for specifying the appearance of an area geometry.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="FillType" abstract="true">
    <xsd:sequence>
      <xsd:element ref="se:Extension" minOccurs="0" />
    </xsd:sequence>
  </xsd:complexType>

  


  <!-- Stroke Abstract Type and Element -->
  <xsd:element name="Stroke" type="se:StrokeType" abstract="true">
    <xsd:annotation>
      <xsd:documentation>A "Stroke" collects the PenStroke, GraphicStroke, CompoundStroke, and StrokeReference elements for specifying the appearance of a lineary geometry.  The definitions parallel SVG strokes.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="StrokeType" abstract="true">
    <xsd:sequence>
      <xsd:element ref="se:LinearRapport" minOccurs="0" />
      <xsd:element ref="se:Extension" minOccurs="0" />
    </xsd:sequence>
  </xsd:complexType>

  <xsd:element name="LinearRapport" type="xsd:boolean" />

  <xsd:element name="Graphic" type="se:GraphicType" abstract="true">
    <xsd:annotation>
      <xsd:documentation>The "Graphic" abstract element collects the various kinds of graphic icons.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="GraphicType" abstract="true">
    <xsd:sequence>
      <xsd:element ref="se:Extension" minOccurs="0" />
    </xsd:sequence>
  </xsd:complexType>


  <!-- Label Abstract Type & element -->
  <xsd:element name="Label" type="se:LabelType" abstract="true">
    <xsd:annotation>
      <xsd:documentation>An "Label" collects PointLabel and LineLabel for specifying the appearance of a text label.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="LabelType" abstract="true" >
    <xsd:sequence>
      <xsd:element ref="se:StyledText"/>
      <xsd:element ref="se:HorizontalAlignment" minOccurs="0"/>
      <xsd:element ref="se:VerticalAlignment" minOccurs="0"/>
    </xsd:sequence>
    <xsd:attribute name="uom" type="se:UomType" />
  </xsd:complexType>

  <!-- StyledText -->
  <xsd:element name="StyledText" type="se:StyledTextType" />
  <xsd:complexType name="StyledTextType">
    <xsd:annotation>
      <xsd:documentation>An "StyledText" links a text with the style to apply to this text (font, halo, fill and stroke) </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element ref="se:Text" />
      <xsd:element ref="se:Font" minOccurs="0"/>
      <xsd:element ref="se:Halo" minOccurs="0"/>
      <xsd:element ref="se:Fill" minOccurs="0"/>
      <xsd:element ref="se:Stroke" minOccurs="0"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:element name="Text" type="se:ParameterValueType"/>
  <xsd:element name="Font" type="se:FontType"/>
  <xsd:complexType name="FontType">
    <xsd:sequence>
      <xsd:element ref="se:FontFamily" minOccurs="0"/>
      <xsd:element ref="se:FontStyle" minOccurs="0"/>
      <xsd:element ref="se:FontWeight" minOccurs="0"/>
      <xsd:element ref="se:FontSize" minOccurs="0"/>
    </xsd:sequence>
    <xsd:attribute name="uom" type="se:UomType" />
  </xsd:complexType>
  <xsd:element name="FontFamily" type="se:ParameterValueType"/>
  <xsd:element name="FontWeight" type="se:ParameterValueType"/> <!-- enumeration: normal, bold -->
  <xsd:element name="FontStyle" type="se:ParameterValueType"/> <!-- enumeration: normal, italic, oblique -->
  <xsd:element name="FontSize" type="se:ParameterValueType"/> 

 
  
  <!--<xsd:element name="FontStyle">
    <xsd:simpleType>
      <xsd:restriction base="xsd:token">
        <xsd:enumeration value="normal"/>
        <xsd:enumeration value="italic"/>
        <xsd:enumeration value="oblique"/>
      </xsd:restriction>
    </xsd:simpleType>
  </xsd:element>-->
  <xsd:element name="Halo" type="se:HaloType"/>
  <xsd:complexType name="HaloType">
    <xsd:sequence>
      <xsd:element ref="se:Radius" minOccurs="0"/>
      <xsd:element ref="se:Fill" minOccurs="0"/>
    </xsd:sequence>
    <xsd:attribute name="uom" type="se:UomType" />
  </xsd:complexType>


  <!--  *** Pamametrized Symbolizer ****-->
  <xsd:element name="ParametrizedSymbolizer" type="se:ParametrizedSymbolizerType">
    <xsd:annotation>
      <xsd:documentation>TODO blbla ArgumentsList for default value ? </xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="ParametrizedSymbolizerType">
    <xsd:sequence>
      <xsd:element ref="se:FormalParameterList" minOccurs="0"/>
      <!-- <xsd:element ref="se:ArgumentsList" minOccurs="0"/> -->
      <xsd:element ref="se:Symbolizer"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:element name="FormalParameterList" type="se:FormalParameterListType"/>
  <xsd:complexType name="FormalParameterListType">
    <xsd:sequence>
      <xsd:element ref="se:FormalParameter" minOccurs="0" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:element name="FormalParameter" type="se:FormalParameterType"/>
  <xsd:complexType name="FormalParameterType">
    <xsd:sequence>
      <xsd:element ref="se:Name"/>
      <xsd:element ref="se:Description" minOccurs="0"/>
    </xsd:sequence>
  </xsd:complexType>

  <!-- SymbolizerReference -->
  <xsd:element name="SymbolizerReference" type="se:SymbolizerReferenceType"
    substitutionGroup="se:Symbolizer">
    <xsd:annotation>
      <xsd:documentation>A "SymbolizerReference" refers to a remote Symbolizer XML document whose body is to be substituted in place of the reference when processed.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="SymbolizerReferenceType">
    <xsd:complexContent>
      <xsd:extension base="se:SymbolizerType">
        <xsd:sequence>
          <xsd:element ref="se:OnlineResource"/>
          <xsd:element ref="se:ArgumentList" minOccurs="0"/>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>

  <xsd:element name="ArgumentList" type="se:ArgumentListType"/>
  <xsd:complexType name="ArgumentListType">
    <xsd:sequence>
      <xsd:element ref="se:Argument" minOccurs="0" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:element name="Argument" type="se:ArgumentType"/>
  <xsd:complexType name="ArgumentType">
    <xsd:sequence>
      <xsd:element ref="se:Name"/>
      <xsd:element ref="se:Description" minOccurs="0"/>
      <xsd:element ref="se:Value"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:element name="Value" type="se:ParameterValueType"/>

  <!-- Composite Symbolizer -->
  <xsd:element name="CompositeSymbolizer" type="se:CompositeSymbolizerType"
    substitutionGroup="se:Symbolizer">
    <xsd:annotation>
      <xsd:documentation>A "CompositeSymbolizer" comprises a group of Symbolizers into a single object.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="CompositeSymbolizerType">
    <xsd:complexContent>
      <xsd:extension base="se:SymbolizerType">
        <xsd:sequence>
          <xsd:element ref="se:Symbolizer" maxOccurs="unbounded"/>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>


  <!-- ************************ Geometry ValueReference ********************************** -->
  <xsd:element name="Geometry" type="se:GeometryType">
    <xsd:annotation>
      <xsd:documentation>A Geometry gives reference to a (the) geometry property of a feature or a general geometry expression to be used for rendering.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="GeometryType">
    <xsd:sequence>
      <xsd:element ref="fes:ValueReference" />
    </xsd:sequence>
  </xsd:complexType>

  <!-- ************************* Affine Transform *********************************** -->
  <xsd:element name="Transform" type="se:TransformType">
    <xsd:annotation>
      <xsd:documentation>A Transform provides an affine transformation to a geometry or graphic elements.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="TransformType">
    <xsd:choice minOccurs="1" maxOccurs="unbounded">
      <xsd:element ref="se:Translate" minOccurs="0"/>
      <xsd:element ref="se:Rotate" minOccurs="0"/>
      <xsd:element ref="se:Scale" minOccurs="0"/>
      <xsd:element ref="se:Matrix" minOccurs="0"/>
    </xsd:choice>
    <xsd:attribute name="uom" type="se:UomType" />
  </xsd:complexType>
  <xsd:element name="Translate" type="se:TranslateType"/>
  <xsd:complexType name="TranslateType">
    <xsd:sequence>
      <xsd:element ref="se:X" minOccurs="0"/>
      <xsd:element ref="se:Y" minOccurs="0"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:element name="X" type="se:ParameterValueType"/>
  <xsd:element name="Y" type="se:ParameterValueType"/>
  <xsd:element name="Rotate" type="se:RotateType"/>
  <xsd:complexType name="RotateType">
    <xsd:sequence>
      <xsd:element ref="se:Angle"/>
      <xsd:element ref="se:X" minOccurs="0"/>
      <xsd:element ref="se:Y" minOccurs="0"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:element name="Angle" type="se:ParameterValueType"/>
  <xsd:element name="Scale" type="se:ScaleType"/>
  <xsd:complexType name="ScaleType">
    <xsd:sequence>
      <xsd:element ref="se:X" minOccurs="0"/>
      <xsd:element ref="se:Y" minOccurs="0"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:element name="Matrix" type="se:MatrixType"/>
  <xsd:complexType name="MatrixType">
    <xsd:sequence>
      <xsd:element ref="se:A" minOccurs="0"/>
      <xsd:element ref="se:B" minOccurs="0"/>
      <xsd:element ref="se:C" minOccurs="0"/>
      <xsd:element ref="se:D" minOccurs="0"/>
      <xsd:element ref="se:E" minOccurs="0"/>
      <xsd:element ref="se:F" minOccurs="0"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:element name="A" type="se:ParameterValueType"/>
  <xsd:element name="B" type="se:ParameterValueType"/>
  <xsd:element name="C" type="se:ParameterValueType"/>
  <xsd:element name="D" type="se:ParameterValueType"/>
  <xsd:element name="E" type="se:ParameterValueType"/>
  <xsd:element name="F" type="se:ParameterValueType"/>
 


  <!-- ************** LINE SYMBOLIZER & Strokes extensions ***************** -->
  <xsd:annotation>
    <xsd:documentation>LINE Symbolizer</xsd:documentation>
  </xsd:annotation>
  <xsd:element name="LineSymbolizer" type="se:LineSymbolizerType"
    substitutionGroup="se:Symbolizer">
    <xsd:annotation>
      <xsd:documentation>A LineSymbolizer is used to render a "stroke" along a linear geometry.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="LineSymbolizerType">
    <xsd:complexContent>
      <xsd:extension base="se:SymbolizerType">
        <xsd:sequence>
          <xsd:element ref="se:Geometry" minOccurs="0"/>
          <xsd:element ref="se:PerpendicularOffset" minOccurs="0"/>
          <!--<xsd:element ref="se:Transform" minOccurs="0"/>-->
          <xsd:element ref="se:Stroke" />
        </xsd:sequence>
        <xsd:attribute name="uom" type="se:UomType" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="PerpendicularOffset" type="se:ParameterValueType"/>


  <!-- Stroke Extensions -->
  <!-- PenStroke -->
  <xsd:element name="PenStroke" type="se:PenStrokeType"
    substitutionGroup="se:Stroke"/>
  <xsd:complexType name="PenStrokeType">
    <xsd:complexContent>
      <xsd:extension base="se:StrokeType">
        <xsd:sequence>
          <xsd:element ref="se:Fill" minOccurs="0"/>
          <xsd:element ref="se:Width" minOccurs="0"/>
          <xsd:element ref="se:LineJoin" minOccurs="0"/>
          <xsd:element ref="se:LineCap" minOccurs="0"/>
          <xsd:element ref="se:DashArray" minOccurs="0"/>
          <xsd:element ref="se:DashOffset" minOccurs="0"/>
        </xsd:sequence>
        <xsd:attribute name="uom" type="se:UomType" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Opacity" type="se:ParameterValueType"/>
  <xsd:element name="LineJoin" type="se:ParameterValueType"/>
  <xsd:element name="LineCap" type="se:ParameterValueType"/>
  <xsd:element name="Width" type="se:ParameterValueType"/>
  <xsd:element name="DashArray" type="se:ParameterValueType"/>
  <xsd:element name="DashOffset" type="se:ParameterValueType"/>


  <!-- GraphicStroke -->
  <xsd:element name="GraphicStroke" type="se:GraphicStrokeType"
    substitutionGroup="se:Stroke">
    <xsd:annotation>
      <xsd:documentation>A "GraphicStroke" defines a repeated linear graphic pattern to be used for stroking a line.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="GraphicStrokeType">
    <xsd:complexContent>
      <xsd:extension base="se:StrokeType">
        <xsd:sequence>
          <xsd:element ref="se:Graphic"/>
          <xsd:element ref="se:Length" minOccurs="0"/>
	  <xsd:element ref="se:RelativeOrientation" />
	  <xsd:element ref="se:RelativePosition" />
        </xsd:sequence>
        <xsd:attribute name="uom" type="se:UomType" />
      </xsd:extension>
   </xsd:complexContent>
  </xsd:complexType>

  <xsd:element name="RelativePosition" type="se:ParameterValueType"/>
  <xsd:element name="RelativeOrientation" type="se:RelativeOrientationType" />

  <xsd:simpleType name="RelativeOrientationType">
    <xsd:restriction base="xsd:token">
      <xsd:enumeration value="normal"/>
      <xsd:enumeration value="line"/>
      <xsd:enumeration value="portrayal"/>
      <xsd:enumeration value="normalUp"/>
    </xsd:restriction>
  </xsd:simpleType>


  <xsd:element name="Length" type="se:ParameterValueType"/>
  <!-- TextStroke -->
  <xsd:element name="TextStroke" type="se:TextStrokeType"
    substitutionGroup="se:Stroke">
    <xsd:annotation>
      <xsd:documentation>A "TextStroke" defines a text label to plot along a line.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="TextStrokeType">
    <xsd:complexContent>
      <xsd:extension base="se:StrokeType">
        <xsd:sequence>
          <xsd:element ref="se:LineLabel"/>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>

  <!-- CompoundStroke -->
  <xsd:element name="CompoundStroke" type="se:CompoundStrokeType"
    substitutionGroup="se:Stroke">
    <xsd:annotation>
      <xsd:documentation>A "CompoundStroke" defines a mixed pattern of simple strokes and/or graphic strokes with gaps between them.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="CompoundStrokeType">
    <xsd:complexContent>
      <xsd:extension base="se:StrokeType">
        <xsd:sequence>
          <xsd:element ref="se:PreGap" minOccurs="0"/>
          <xsd:choice maxOccurs="unbounded">
            <xsd:element ref="se:StrokeElement"/>
            <xsd:element ref="se:AlternativeStrokeElements"/>
          </xsd:choice>
          <xsd:element ref="se:PostGap" minOccurs="0"/>
          <!--<xsd:element ref="se:StrokeAnnotationGraphic" minOccurs="0"
            maxOccurs="unbounded"/>-->
        </xsd:sequence>
        <xsd:attribute name="uom" type="se:UomType" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>

  <xsd:element name="StrokeElement" type="se:StrokeElementType"/>
  <xsd:complexType name="StrokeElementType">
    <xsd:sequence>
      <xsd:element ref="se:PreGap" minOccurs="0"/>
      <xsd:element ref="se:Stroke" >
        <xsd:annotation>
          <xsd:documentation>Restricted Stroke: not allowed to nest a compound stroke within a compound stroke...</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element ref="se:Length" minOccurs="0"/>
      <xsd:element ref="se:PostGap" minOccurs="0"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:element name="PreGap" type="se:ParameterValueType"/>
  <xsd:element name="PostGap" type="se:ParameterValueType"/>


  <xsd:element name="AlternativeStrokeElements"
    type="se:AlternativeStrokeElementsType"/>
  <xsd:complexType name="AlternativeStrokeElementsType">
    <xsd:sequence>
      <xsd:element ref="se:StrokeElement" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <!--<xsd:element name="StrokeAnnotationGraphic"
    type="se:StrokeAnnotationGraphicType"/>
  <xsd:complexType name="StrokeAnnotationGraphicType">
    <xsd:sequence>
      <xsd:element ref="se:Graphic" minOccurs="0"/>
      <xsd:element ref="se:RelativePosition" minOccurs="0"/>
      <xsd:element ref="se:RelativeOrientation" />
    </xsd:sequence>
  </xsd:complexType>
  <xsd:element name="RelativePosition" type="se:ParameterValueType"/>
  -->

  <!-- StrokeReference -->
  <xsd:element name="StrokeReference" type="se:StrokeReferenceType"
    substitutionGroup="se:Stroke">
    <xsd:annotation>
      <xsd:documentation>A "StrokeReference" imports a stroke from a remote resource.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="StrokeReferenceType">
    <xsd:complexContent>
      <xsd:extension base="se:StrokeType">
        <xsd:sequence>
          <xsd:element name="OnlineResource" type="se:VariableOnlineResourceType"/>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>


  <!-- ****** Area Symbolizer & Fill extensions ******* -->
  <xsd:annotation>
    <xsd:documentation>AREA Symbolizer</xsd:documentation>
  </xsd:annotation>
  <xsd:element name="AreaSymbolizer" type="se:AreaSymbolizerType"
    substitutionGroup="se:Symbolizer">
    <xsd:annotation>
      <xsd:documentation>A "AreaSymbolizer" specifies the rendering of a polygon or other area/surface geometry, including its interior fill and border stroke.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="AreaSymbolizerType">
    <xsd:complexContent>
      <xsd:extension base="se:SymbolizerType">
        <xsd:sequence>
          <xsd:element ref="se:Geometry" minOccurs="0"/>
          <xsd:element ref="se:PerpendicularOffset" minOccurs="0"/>
          <!--<xsd:element ref="se:Transform" minOccurs="0"/>-->
          <xsd:element ref="se:Displacement" minOccurs="0"/>
          <xsd:element ref="se:Fill" minOccurs="0"/>
          <xsd:element ref="se:Stroke" minOccurs="0"/>
        </xsd:sequence>
        <xsd:attribute name="uom" type="se:UomType" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>

  <xsd:element name="Displacement" type="se:TranslateType" />

  <!-- SolidFill -->
  <xsd:element name="SolidFill" type="se:SolidFillType"
      substitutionGroup="se:Fill">
    <xsd:annotation>
      <xsd:documentation>A "SolidFill" specifies the color and opacity for the solid filling of the interior of an area geometry.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="SolidFillType">
    <xsd:complexContent>
      <xsd:extension base="se:FillType">
        <xsd:sequence>
          <xsd:element ref="se:Color" minOccurs="0"/>
          <xsd:element ref="se:Opacity" minOccurs="0"/>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Color" type="se:ParameterValueType" />

  <!-- GraphicFill -->
  <xsd:element name="GraphicFill" type="se:GraphicFillType"
    substitutionGroup="se:Fill">
    <xsd:annotation>
      <xsd:documentation>A "GraphicFill" defines repeated-graphic filling (stippling) pattern for an area geometry.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="GraphicFillType">
    <xsd:complexContent>
      <xsd:extension base="se:FillType">
        <xsd:sequence>
          <xsd:element ref="se:Graphic"/>
          <xsd:element ref="se:TileGap" minOccurs="0"/>
        </xsd:sequence>
        <xsd:attribute name="uom" type="se:UomType" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="TileGap" type="se:TileGapType"/>
  <xsd:complexType name="TileGapType">
    <xsd:sequence>
      <xsd:element ref="se:X" minOccurs="0"/>
      <xsd:element ref="se:Y" minOccurs="0"/>
    </xsd:sequence>
  </xsd:complexType>

  <!-- HatchedFill -->
  <xsd:element name="HatchedFill" type="se:HatchedFillType"
        substitutionGroup="se:Fill">
    <xsd:annotation>
      <xsd:documentation>
           A "HatchedFill" specifies hatches (i.e. Stroke) that are repeated whithin the area according to
            line orientation, perpendicular distance between two consecutive hatches and an offset
      </xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="HatchedFillType">
    <xsd:complexContent>
      <xsd:extension base="se:FillType">
        <xsd:sequence>
          <xsd:element ref="se:Stroke" />
          <xsd:element ref="se:Angle" minOccurs="0"/>
          <xsd:element ref="se:Distance" />
          <xsd:element ref="se:Offset" />
        </xsd:sequence>
        <xsd:attribute name="uom" type="se:UomType" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Distance" type="se:ParameterValueType"/>
  <xsd:element name="Offset" type="se:ParameterValueType"/>



  <!-- FillReference -->
  <xsd:element name="FillReference" type="se:FillReferenceType"
    substitutionGroup="se:Fill">
    <xsd:annotation>
      <xsd:documentation>A "FillReference" imports a fill from a remote resource.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="FillReferenceType">
    <xsd:complexContent>
      <xsd:extension base="se:FillType">
        <xsd:sequence>
          <xsd:element name="OnlineResource" type="se:VariableOnlineResourceType"/>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>




  <!-- ****** Point Symbolizer & Graphic Extensions ******** -->
  <xsd:annotation>
    <xsd:documentation>POINT Symbolizer</xsd:documentation>
  </xsd:annotation>
  <xsd:element name="PointSymbolizer" type="se:PointSymbolizerType"
    substitutionGroup="se:Symbolizer">
    <xsd:annotation>
      <xsd:documentation>A "PointSymbolizer" specifies the rendering of a "graphic icon" at a point.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="PointSymbolizerType">
    <xsd:complexContent>
      <xsd:extension base="se:SymbolizerType">
        <xsd:sequence>
          <xsd:element ref="se:Geometry" minOccurs="0"/>
          <!--<xsd:element ref="se:Transform" minOccurs="0"/>-->
          <xsd:element ref="se:Graphic"/>
        </xsd:sequence>
        <xsd:attribute name="uom" type="se:UomType" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>


  <!-- ExternalGraphic -->
  <xsd:element name="ExternalGraphic" type="se:ExternalGraphicType"
    substitutionGroup="se:Graphic">
    <xsd:annotation>
      <xsd:documentation>An "ExternalGraphic" uses a graphic icon in an external format.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="ExternalGraphicType">
    <xsd:complexContent>
      <xsd:extension base="se:GraphicType">
        <xsd:sequence>
          <xsd:choice>
            <xsd:element name="OnlineResource" type="se:VariableOnlineResourceType"/>
            <xsd:element ref="se:InlineContent"/>
          </xsd:choice>
          <xsd:element ref="se:Format"/>
          <xsd:element ref="se:ViewBox" minOccurs="0"/>
          <xsd:element ref="se:Transform" minOccurs="0"/>
          <xsd:element ref="se:Opacity" minOccurs="0"/>
          <xsd:element ref="se:Halo" minOccurs="0"/>
        </xsd:sequence>
        <xsd:attribute name="uom" type="se:UomType" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Format" type="xsd:string"/>
  <xsd:element name="ViewBox" type="se:ViewBoxType"/>
  <xsd:complexType name="ViewBoxType">
    <xsd:sequence>
      <xsd:element ref="se:Width" minOccurs="0"/>
      <xsd:element ref="se:Height" minOccurs="0"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:element name="Height" type="se:ParameterValueType"/>

  <!-- MarkGraphic -->
  <xsd:element name="MarkGraphic" type="se:MarkGraphicType"
    substitutionGroup="se:Graphic">
    <xsd:annotation>
      <xsd:documentation>A "MarkGraphic" uses a geometric surface or curve in some format and strokes and/or fills it to produce a graphic icon.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="MarkGraphicType">
    <xsd:complexContent>
      <xsd:extension base="se:GraphicType">
        <xsd:sequence>
          <xsd:choice minOccurs="0">
            <xsd:element ref="se:WellKnownName"/>
            <xsd:sequence>
              <xsd:choice>
                <xsd:element name="OnlineResource" type="se:VariableOnlineResourceType"/>
                <xsd:element ref="se:InlineContent"/>
              </xsd:choice>
              <xsd:element ref="se:Format"/>
              <xsd:element ref="se:MarkIndex" minOccurs="0"/>
            </xsd:sequence>
          </xsd:choice>
          <xsd:element ref="se:ViewBox" minOccurs="0"/>
          <xsd:element ref="se:PerpendicularOffset" minOccurs="0"/>
          <xsd:element ref="se:Transform" minOccurs="0"/>
          <xsd:element ref="se:Halo" minOccurs="0"/>
          <xsd:element ref="se:Fill" minOccurs="0"/>
          <xsd:element ref="se:Stroke" minOccurs="0"/>
        </xsd:sequence>
        <xsd:attribute name="uom" type="se:UomType" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="WellKnownName" type="se:ParameterValueType"/>
  <xsd:element name="MarkIndex" type="se:ParameterValueType"/>

  <!-- PointTextGraphic -->
  <xsd:element name="PointTextGraphic" type="se:PointTextGraphicType"
    substitutionGroup="se:Graphic">
    <xsd:annotation>
      <xsd:documentation>A "PointTextGraphic" plots a text label at a given point.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="PointTextGraphicType">
    <xsd:complexContent>
      <xsd:extension base="se:GraphicType">
        <xsd:sequence>
          <xsd:element ref="se:PointPosition" minOccurs="0"/>
          <xsd:element ref="se:PointLabel" minOccurs="0"/>
        </xsd:sequence>
        <xsd:attribute name="uom" type="se:UomType" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="PointPosition" type="se:TranslateType"/>

  <!-- AlternativeGraphics -->
  <xsd:element name="AlternativeGraphics" type="se:AlternativeGraphicsType"
    substitutionGroup="se:Graphic">
    <xsd:annotation>
      <xsd:documentation>An "AlternativeGraphics" element allows the selection of one graphic from a group of semantically eqivalent graphics in case some formats are not supported.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="AlternativeGraphicsType">
    <xsd:complexContent>
      <xsd:extension base="se:GraphicType">
        <xsd:sequence>
          <xsd:element ref="se:Graphic" minOccurs="2" maxOccurs="unbounded"/>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>

  <!-- CompositeGraphic -->
  <xsd:element name="CompositeGraphic" type="se:CompositeGraphicType"
    substitutionGroup="se:Graphic">
    <xsd:annotation>
      <xsd:documentation>A "CompositeGraphic" binds a group of individual graphics into a single composite graphic.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="CompositeGraphicType">
    <xsd:complexContent>
      <xsd:extension base="se:GraphicType">
        <xsd:sequence>
          <xsd:element ref="se:Graphic" minOccurs="2"
            maxOccurs="unbounded"/>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>

  <!-- GraphicReference -->
  <xsd:element name="GraphicReference" type="se:GraphicReferenceType"
    substitutionGroup="se:Graphic">
    <xsd:annotation>
      <xsd:documentation>A "GraphicReference" refers to a remote SE Graphic XML document whose body is to be substituted in place of the reference when processed.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="GraphicReferenceType">
    <xsd:complexContent>
      <xsd:extension base="se:GraphicType">
        <xsd:sequence>
          <xsd:element name="OnlineResource" type="se:VariableOnlineResourceType"/>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>

  <!-- ***** Text Symbolizer and Label extension ******* -->
  <xsd:annotation>
    <xsd:documentation>TEXT Symbolizer</xsd:documentation>
  </xsd:annotation>
  <xsd:element name="TextSymbolizer" type="se:TextSymbolizerType"
    substitutionGroup="se:Symbolizer">
    <xsd:annotation>
      <xsd:documentation>A "TextSymbolizer" is used to render text labels according to various graphical parameters.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="TextSymbolizerType">
    <xsd:complexContent>
      <xsd:extension base="se:SymbolizerType">
        <xsd:sequence>
          <xsd:element ref="se:Geometry" minOccurs="0"/>
          <xsd:element ref="se:PerpendicularOffset" minOccurs="0"/>
          <!--<xsd:element ref="se:Transform" minOccurs="0"/>-->
          <xsd:element ref="se:Label" />
        </xsd:sequence>
        <xsd:attribute name="uom" type="se:UomType" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>


  <!-- PointLabel -->
  <xsd:element name="PointLabel" type="se:PointLabelType"
    substitutionGroup="se:Label"/>
  <xsd:complexType name="PointLabelType">
    <xsd:complexContent>
      <xsd:extension base="se:LabelType">
        <xsd:sequence>
          <xsd:element ref="se:Rotation" minOccurs="0"/>
          <xsd:element ref="se:ExclusionZone" minOccurs="0"/>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Rotation" type="se:ParameterValueType"/>


  <xsd:element name="ExclusionZone" type="se:ExclusionZoneType" abstract="true"/>
  <xsd:complexType name="ExclusionZoneType" abstract="true">
        <xsd:attribute name="uom" type="se:UomType" />
  </xsd:complexType>

  <xsd:element name="ExclusionRadius" type="se:ExclusionRadiusType"
    substitutionGroup="se:ExclusionZone"/>
  <xsd:complexType name="ExclusionRadiusType">
    <xsd:complexContent>
      <xsd:extension base="se:ExclusionZoneType">
        <xsd:sequence>
          <xsd:element ref="se:Radius"/>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Radius" type="se:ParameterValueType"/>


  <xsd:element name="ExclusionRectangle" type="se:ExclusionRectangleType"
    substitutionGroup="se:ExclusionZone"/>
  <xsd:complexType name="ExclusionRectangleType">
    <xsd:complexContent>
      <xsd:extension base="se:ExclusionZoneType">
        <xsd:sequence>
          <xsd:element ref="se:X"/>
          <xsd:element ref="se:Y"/>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>


  <!-- LineLabel -->
  <xsd:element name="LineLabel" type="se:LineLabelType"
    substitutionGroup="se:Label"/>
  <xsd:complexType name="LineLabelType">
    <xsd:complexContent>
      <xsd:extension base="se:LabelType">
        <xsd:sequence>
	  <xsd:element ref="se:RelativeOrientation" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>

  <xsd:element name="HorizontalAlignment" type="se:ParameterValueType"/> <!-- enumeration: left, center, right -->
  <xsd:element name="VerticalAlignment" type="se:ParameterValueType"/> <!-- enumeration: top, middle, baseline, bottom -->


  <!-- ********************************************************************* -->
  <!-- ***************************** FUNCTIONS ***************************** -->
  <!-- ********************************************************************* -->
  <xsd:annotation>
    <xsd:documentation>Function element</xsd:documentation>
  </xsd:annotation>
  <xsd:element name="Function" type="se:FunctionType" abstract="true"
    substitutionGroup="fes:expression"/>
  <xsd:complexType name="FunctionType" abstract="true">
    <xsd:attribute name="fallbackValue" type="xsd:string" use="optional"/> 
  </xsd:complexType>
  <xsd:annotation>
    <xsd:documentation>Numeric formatting function</xsd:documentation>
  </xsd:annotation>

  <!-- ********************************************************************* -->
  <xsd:element name="FormatNumber" type="se:FormatNumberType"
    substitutionGroup="se:Function">
    <xsd:annotation>
      <xsd:documentation>Function for formatting numbers to make them human readable.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="FormatNumberType">
    <xsd:complexContent>
      <xsd:extension base="se:FunctionType">
        <xsd:sequence>
          <xsd:element ref="se:NumericValue"/>
          <xsd:element ref="se:Pattern"/>
          <xsd:element ref="se:NegativePattern" minOccurs="0"/>
        </xsd:sequence>
        <xsd:attribute name="decimalPoint" type="xsd:string" use="optional"
          default="."/>
        <xsd:attribute name="groupingSeparator" type="xsd:string" use="optional"
          default=","/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="NumericValue" type="se:ParameterValueType"/>
  <xsd:element name="Pattern" type="xsd:string"/>
  <xsd:element name="NegativePattern" type="xsd:string"/>

  <!-- ********************************************************************* -->
  <xsd:annotation>
    <xsd:documentation>Date formatting function</xsd:documentation>
  </xsd:annotation>
  <xsd:element name="FormatDate" type="se:FormatDateType"
    substitutionGroup="se:Function">
    <xsd:annotation>
      <xsd:documentation>Function for dates.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="FormatDateType">
    <xsd:complexContent>
      <xsd:extension base="se:FunctionType">
        <xsd:sequence>
          <xsd:element ref="se:DateValue"/>
          <xsd:element ref="se:Pattern"/>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="DateValue" type="se:ParameterValueType"/>

  <!-- ********************************************************************* -->
  <xsd:annotation>
    <xsd:documentation>String formatting functions</xsd:documentation>
  </xsd:annotation>

  <!-- *********************************************************************-->
  <xsd:element name="Substring" type="se:SubstringType"
    substitutionGroup="se:Function">
    <xsd:annotation>
      <xsd:documentation>Returns substrings.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="SubstringType">
    <xsd:complexContent>
      <xsd:extension base="se:FunctionType">
        <xsd:sequence>
          <xsd:element ref="se:StringValue"/>
          <xsd:element ref="se:Position" minOccurs="0"/>
          <xsd:element ref="se:Length" minOccurs="0"/>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="StringValue" type="se:ParameterValueType"/>
  <xsd:element name="Position" type="se:ParameterValueType"/>

  <!-- *********************************************************************-->
  <xsd:element name="Concatenate" type="se:ConcatenateType"
    substitutionGroup="se:Function">
    <xsd:annotation>
      <xsd:documentation>Concatenates strings.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="ConcatenateType">
    <xsd:complexContent>
      <xsd:extension base="se:FunctionType">
        <xsd:sequence>
          <xsd:element ref="se:StringValue" minOccurs="2" maxOccurs="unbounded"/>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>

  <!-- ********************************************************************* -->
  <xsd:element name="ChangeCase" type="se:ChangeCaseType"
    substitutionGroup="se:Function">
    <xsd:annotation>
      <xsd:documentation>Changes the case of strings.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="ChangeCaseType">
    <xsd:complexContent>
      <xsd:extension base="se:FunctionType">
        <xsd:sequence>
          <xsd:element ref="se:StringValue"/>
        </xsd:sequence>
        <xsd:attribute name="direction" type="se:directionType"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:simpleType name="directionType">
    <xsd:restriction base="xsd:token">
      <xsd:enumeration value="toUpper"/>
      <xsd:enumeration value="toLower"/>
    </xsd:restriction>
  </xsd:simpleType>

  <!-- ********************************************************************* -->
  <xsd:element name="Trim" type="se:TrimType" substitutionGroup="se:Function">
    <xsd:annotation>
      <xsd:documentation>Strips off chars from a string value</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="TrimType">
    <xsd:complexContent>
      <xsd:extension base="se:FunctionType">
        <xsd:sequence>
          <xsd:element ref="se:StringValue"/>
        </xsd:sequence>
        <xsd:attribute name="stripOffPosition" type="se:stripOffPositionType"/>
        <xsd:attribute name="stripOffChar" type="xsd:string"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:simpleType name="stripOffPositionType">
    <xsd:restriction base="xsd:token">
      <xsd:enumeration value="leading"/>
      <xsd:enumeration value="trailing"/>
      <xsd:enumeration value="both"/>
    </xsd:restriction>
  </xsd:simpleType>

  <!-- ********************************************************************* -->
  <xsd:element name="StringPosition" type="se:StringPositionType"
    substitutionGroup="se:Function">
    <xsd:annotation>
      <xsd:documentation>Returns position of first occurence of a substring</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="StringPositionType">
    <xsd:complexContent>
      <xsd:extension base="se:FunctionType">
        <xsd:sequence>
          <xsd:element ref="se:LookupString"/>
          <xsd:element ref="se:StringValue"/>
        </xsd:sequence>
        <xsd:attribute name="searchDirection" type="se:searchDirectionType"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="LookupString" type="se:ParameterValueType"/>
  <xsd:simpleType name="searchDirectionType">
    <xsd:restriction base="xsd:token">
      <xsd:enumeration value="frontToBack"/>
      <xsd:enumeration value="backToFront"/>
    </xsd:restriction>
  </xsd:simpleType>

  <!-- *********************************************************************-->
  <xsd:element name="StringLength" type="se:StringLengthType"
    substitutionGroup="se:Function">
    <xsd:annotation>
      <xsd:documentation>Returns length of string</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="StringLengthType">
    <xsd:complexContent>
      <xsd:extension base="se:FunctionType">
        <xsd:sequence>
          <xsd:element ref="se:StringValue"/>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>

  <!-- ********************************************************************* -->
  <xsd:annotation>
    <xsd:documentation>Categorize function</xsd:documentation>
  </xsd:annotation>
  <xsd:element name="Categorize" type="se:CategorizeType"
    substitutionGroup="se:Function">
    <xsd:annotation>
      <xsd:documentation>The transformation of continuous values to distinct values.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="CategorizeType">
    <xsd:complexContent>
      <xsd:extension base="se:FunctionType">
        <xsd:sequence>
          <xsd:element ref="se:LookupValue"/>
          <xsd:sequence minOccurs="0" maxOccurs="unbounded">
            <xsd:element ref="se:Threshold"/>
            <xsd:element ref="se:Value"/>
          </xsd:sequence>
      	  <xsd:element ref="se:Extension" minOccurs="0" />
        </xsd:sequence>
        <xsd:attribute name="thresholdBelongsTo"
          type="se:ThresholdBelongsToType" use="optional"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="LookupValue" type="se:ParameterValueType"/>
  <xsd:element name="FirstValue" type="se:ParameterValueType"/>
  <xsd:element name="Threshold" type="fes:LiteralType"/>
  <xsd:simpleType name="ThresholdBelongsToType">
    <xsd:restriction base="xsd:token">
      <xsd:enumeration value="succeeding"/>
      <xsd:enumeration value="preceding"/>
    </xsd:restriction>
  </xsd:simpleType>


  <!-- ********************************************************************* -->
  <xsd:annotation>
    <xsd:documentation>Interpolate function</xsd:documentation>
  </xsd:annotation>
  <xsd:element name="Interpolate" type="se:InterpolateType"
    substitutionGroup="se:Function">
    <xsd:annotation>
      <xsd:documentation>The transformation of continuous values to a number of values.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="InterpolateType">
    <xsd:complexContent>
      <xsd:extension base="se:FunctionType">
        <xsd:sequence>
          <xsd:element ref="se:LookupValue"/>
          <xsd:element ref="se:InterpolationPoint" maxOccurs="unbounded"/>
        </xsd:sequence>
        <xsd:attribute name="mode" type="se:ModeType"/>
        <xsd:attribute name="method" type="se:MethodType"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="InterpolationPoint" type="se:InterpolationPointType"/>
  <xsd:complexType name="InterpolationPointType">
      <xsd:sequence>
        <xsd:element ref="se:Data"/>
        <xsd:element ref="se:Value"/>
      </xsd:sequence>
  </xsd:complexType>
  <xsd:element name="Data" type="xsd:double"/>
  <xsd:simpleType name="ModeType">
    <xsd:restriction base="xsd:token">
      <xsd:enumeration value="linear"/>
      <xsd:enumeration value="cosine"/>
      <xsd:enumeration value="cubic"/>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:simpleType name="MethodType">
    <xsd:restriction base="xsd:token">
      <xsd:enumeration value="numeric"/>
      <xsd:enumeration value="color"/>
    </xsd:restriction>
  </xsd:simpleType>

  <!-- ********************************************************************* -->
  <xsd:element name="Recode" type="se:RecodeType"
    substitutionGroup="se:Function">
    <xsd:annotation>
      <xsd:documentation>Transformation of discrete values to other values</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="RecodeType">
    <xsd:complexContent>
      <xsd:extension base="se:FunctionType">
        <xsd:sequence>
          <xsd:element ref="se:LookupValue"/>
          <xsd:element ref="se:MapItem" maxOccurs="unbounded"/>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="MapItem" type="se:MapItemType" />
  <xsd:complexType name="MapItemType">
      <xsd:sequence>
        <xsd:element ref="se:Key"/>
        <xsd:element ref="se:Value"/>
      </xsd:sequence>
  </xsd:complexType>
  <xsd:element name="Key" type="xsd:string" />

  <!-- *********************************************************************-->
  <xsd:element name="Dimension" type="se:DimensionType"
    substitutionGroup="se:Function">
    <xsd:annotation>
      <xsd:documentation>Returns the dimensionality of geometry object: points=0, curves=1, surfaces=2 [ISO 19125-1].</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="DimensionType">
    <xsd:complexContent>
      <xsd:extension base="se:FunctionType">
        <xsd:sequence>
          <xsd:element ref="se:Geometry"/>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
</xsd:schema>
